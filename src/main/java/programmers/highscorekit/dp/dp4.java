package programmers.highscorekit.dp;
/*
도둑이 어느 마을을 털 계획을 하고 있습니다.
이 마을의 모든 집들은 아래 그림과 같이 동그랗게 배치되어 있습니다.

각 집들은 서로 인접한 집들과 방범장치가 연결되어 있기 떄문에 인접한 두 집을 털면 경보가 울립니다.
각 집에 있는 돈이 담긴 배열 money가 주어질 때,도둑이 홈칠 수 있는 돈의 최댓값을 return 하도록 solution을 작성해라.
 */

public class dp4 {
    public static void main(String args[])
    {

    }
}

/*
구해야하는 사항이 돈의 최댓값이기 때문에 dp 배열은 dp[i] = 도둑이 i번째 집에 왔을 때 훔친 돈의 최댓값이라고 하자.

현재 집을 털거나 ( 그 전전 집의 dp 값 + 현재 집이 가진 돈 = dp[i=2] + money[i]
현재 집을 털지 않거나 (i-1 번째 dp 값을 그대로 가져온다.)
로 나뉘어져 dp[i] = Math.max(dp[i-1], dp[i-2] + money[i])

집은 원형, 집 하나를 털면 양 옆의 집은 무조건 털 수 없는 구조
1. 첫번째 집을 무조건 털고, 마지막 집을 무조건 털지 않는 경우
2. 철 번째 집을 무조건 털지 않는 경우
 */
